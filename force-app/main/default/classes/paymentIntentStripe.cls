/**
 * @description       : 
 * @author            : Iamsfdeveloper
 * @group             : 
 * @last modified on  : 12-23-2021
 * @last modified by  : Iamsfdeveloper
**/
//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class paymentIntentStripe {
	
	public class Payment_method_details {
		public Sepa_debit sepa_debit {get;set;} 
		public String type {get;set;} 

		public Payment_method_details(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'sepa_debit') {
							sepa_debit = new Sepa_debit(parser);
						} else if (text == 'type') {
							type = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Payment_method_details consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Address {
		public String city {get;set;} 
		public String country {get;set;} 
		public String line1 {get;set;} 
		public String line2 {get;set;} 
		public String postal_code {get;set;} 
		public String state {get;set;} 

		public Address(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'city') {
							city = parser.getText();
						} else if (text == 'country') {
							country = parser.getText();
						} else if (text == 'line1') {
							line1 = parser.getText();
						} else if (text == 'line2') {
							line2 = parser.getText();
						} else if (text == 'postal_code') {
							postal_code = parser.getText();
						} else if (text == 'state') {
							state = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Address consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Object_Z {
		public Integer amount {get;set;} 
		public Integer amount_capturable {get;set;} 
		public Integer amount_received {get;set;} 
		public Object application {get;set;} 
		public Object application_fee_amount {get;set;} 
		public Object automatic_payment_methods {get;set;} 
		public Object canceled_at {get;set;} 
		public Object cancellation_reason {get;set;} 
		public String capture_method {get;set;} 
		public Charges charges {get;set;} 
		public String client_secret {get;set;} 
		public String confirmation_method {get;set;} 
		public Integer created {get;set;} 
		public String currency_Z {get;set;} // in json: currency
		public String customer {get;set;} 
		public Object description {get;set;} 
		public String id {get;set;} 
		public Object invoice {get;set;} 
		public Object last_payment_error {get;set;} 
		public Boolean livemode {get;set;} 
		public Metadata metadata {get;set;} 
		public Object next_action {get;set;} 
		public String object_Z {get;set;} // in json: object
		public Object on_behalf_of {get;set;} 
		public String payment_method {get;set;} 
		public Payment_method_options payment_method_options {get;set;} 
		public List<String> payment_method_types {get;set;} 
		public Object receipt_email {get;set;} 
		public Object review {get;set;} 
		public Object setup_future_usage {get;set;} 
		public Object shipping {get;set;} 
		public Object source {get;set;} 
		public Object statement_descriptor {get;set;} 
		public Object statement_descriptor_suffix {get;set;} 
		public String status {get;set;} 
		public Object transfer_data {get;set;} 
		public Object transfer_group {get;set;} 

		public Object_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'amount') {
							amount = parser.getIntegerValue();
						} else if (text == 'amount_capturable') {
							amount_capturable = parser.getIntegerValue();
						} else if (text == 'amount_received') {
							amount_received = parser.getIntegerValue();
						} else if (text == 'application') {
							application = parser.readValueAs(Object.class);
						} else if (text == 'application_fee_amount') {
							application_fee_amount = parser.readValueAs(Object.class);
						} else if (text == 'automatic_payment_methods') {
							automatic_payment_methods = parser.readValueAs(Object.class);
						} else if (text == 'canceled_at') {
							canceled_at = parser.readValueAs(Object.class);
						} else if (text == 'cancellation_reason') {
							cancellation_reason = parser.readValueAs(Object.class);
						} else if (text == 'capture_method') {
							capture_method = parser.getText();
						} else if (text == 'charges') {
							charges = new Charges(parser);
						} else if (text == 'client_secret') {
							client_secret = parser.getText();
						} else if (text == 'confirmation_method') {
							confirmation_method = parser.getText();
						} else if (text == 'created') {
							created = parser.getIntegerValue();
						} else if (text == 'currency') {
							currency_Z = parser.getText();
						} else if (text == 'customer') {
							customer = parser.getText();
						} else if (text == 'description') {
							description = parser.readValueAs(Object.class);
						} else if (text == 'id') {
							id = parser.getText();
						} else if (text == 'invoice') {
							invoice = parser.readValueAs(Object.class);
						} else if (text == 'last_payment_error') {
							last_payment_error = parser.readValueAs(Object.class);
						} else if (text == 'livemode') {
							livemode = parser.getBooleanValue();
						} else if (text == 'metadata') {
							metadata = new Metadata(parser);
						} else if (text == 'next_action') {
							next_action = parser.readValueAs(Object.class);
						} else if (text == 'object') {
							object_Z = parser.getText();
						} else if (text == 'on_behalf_of') {
							on_behalf_of = parser.readValueAs(Object.class);
						} else if (text == 'payment_method') {
							payment_method = parser.getText();
						} else if (text == 'payment_method_options') {
							payment_method_options = new Payment_method_options(parser);
						} else if (text == 'payment_method_types') {
							payment_method_types = arrayOfString(parser);
						} else if (text == 'receipt_email') {
							receipt_email = parser.readValueAs(Object.class);
						} else if (text == 'review') {
							review = parser.readValueAs(Object.class);
						} else if (text == 'setup_future_usage') {
							setup_future_usage = parser.readValueAs(Object.class);
						} else if (text == 'shipping') {
							shipping = parser.readValueAs(Object.class);
						} else if (text == 'source') {
							source = parser.readValueAs(Object.class);
						} else if (text == 'statement_descriptor') {
							statement_descriptor = parser.readValueAs(Object.class);
						} else if (text == 'statement_descriptor_suffix') {
							statement_descriptor_suffix = parser.readValueAs(Object.class);
						} else if (text == 'status') {
							status = parser.getText();
						} else if (text == 'transfer_data') {
							transfer_data = parser.readValueAs(Object.class);
						} else if (text == 'transfer_group') {
							transfer_group = parser.readValueAs(Object.class);
						} else {
							System.debug(LoggingLevel.WARN, 'Object_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Metadata {
		public String donationid {get; set;} 
		public String cartid     {get; set;}
		public Metadata(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'donationid') {
							donationid = parser.getText();
						}else if (text == 'cartid') {
							cartid = parser.getText();
						}
						else if (text == '_cart_id') {
							cartid = parser.getText();
						}else {
							System.debug(LoggingLevel.WARN, 'Metadata consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Request {
		public String id {get; set;} 
		public String idempotency_key { get; set; } 

		public Request(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'idempotency_key') {
							idempotency_key = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Request consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Data {
		public Integer amount {get;set;} 
		public Integer amount_captured {get;set;} 
		public Integer amount_refunded {get;set;} 
		public Object application {get;set;} 
		public Object application_fee {get;set;} 
		public Object application_fee_amount {get;set;} 
		public String balance_transaction {get;set;} 
		public Billing_details billing_details {get;set;} 
		public Object calculated_statement_descriptor {get;set;} 
		public Boolean captured {get;set;} 
		public Integer created {get;set;} 
		public String currency_Z {get;set;} // in json: currency
		public String customer {get;set;} 
		public Object description {get;set;} 
		public Object destination {get;set;} 
		public Object dispute {get;set;} 
		public Boolean disputed {get;set;} 
		public Object failure_code {get;set;} 
		public Object failure_message {get;set;} 
		public Fraud_details fraud_details {get;set;} 
		public String id {get;set;} 
		public Object invoice {get;set;} 
		public Boolean livemode {get;set;} 
		public Metadata metadata {get;set;} 
		public String object_Z {get;set;} // in json: object
		public Object on_behalf_of {get;set;} 
		public Object order {get;set;} 
		public Outcome outcome {get;set;} 
		public Boolean paid {get;set;} 
		public String payment_intent {get;set;} 
		public String payment_method {get;set;} 
		public Payment_method_details payment_method_details {get;set;} 
		public Object receipt_email {get;set;} 
		public Object receipt_number {get;set;} 
		public String receipt_url {get;set;} 
		public Boolean refunded {get;set;} 
		public Refunds refunds {get;set;} 
		public Object review {get;set;} 
		public Object shipping {get;set;} 
		public Object source {get;set;} 
		public Object source_transfer {get;set;} 
		public Object statement_descriptor {get;set;} 
		public Object statement_descriptor_suffix {get;set;} 
		public String status {get;set;} 
		public Object transfer_data {get;set;} 
		public Object transfer_group {get;set;} 

		public Data(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'amount') {
							amount = parser.getIntegerValue();
						} else if (text == 'amount_captured') {
							amount_captured = parser.getIntegerValue();
						} else if (text == 'amount_refunded') {
							amount_refunded = parser.getIntegerValue();
						} else if (text == 'application') {
							application = parser.readValueAs(Object.class);
						} else if (text == 'application_fee') {
							application_fee = parser.readValueAs(Object.class);
						} else if (text == 'application_fee_amount') {
							application_fee_amount = parser.readValueAs(Object.class);
						} else if (text == 'balance_transaction') {
							balance_transaction = parser.getText();
						} else if (text == 'billing_details') {
							billing_details = new Billing_details(parser);
						} else if (text == 'calculated_statement_descriptor') {
							calculated_statement_descriptor = parser.readValueAs(Object.class);
						} else if (text == 'captured') {
							captured = parser.getBooleanValue();
						} else if (text == 'created') {
							created = parser.getIntegerValue();
						} else if (text == 'currency') {
							currency_Z = parser.getText();
						} else if (text == 'customer') {
							customer = parser.getText();
						} else if (text == 'description') {
							description = parser.readValueAs(Object.class);
						} else if (text == 'destination') {
							destination = parser.readValueAs(Object.class);
						} else if (text == 'dispute') {
							dispute = parser.readValueAs(Object.class);
						} else if (text == 'disputed') {
							disputed = parser.getBooleanValue();
						} else if (text == 'failure_code') {
							failure_code = parser.readValueAs(Object.class);
						} else if (text == 'failure_message') {
							failure_message = parser.readValueAs(Object.class);
						} else if (text == 'fraud_details') {
							fraud_details = new Fraud_details(parser);
						} else if (text == 'id') {
							id = parser.getText();
						} else if (text == 'invoice') {
							invoice = parser.readValueAs(Object.class);
						} else if (text == 'livemode') {
							livemode = parser.getBooleanValue();
						} else if (text == 'metadata') {
							metadata = new Metadata(parser);
						} else if (text == 'object') {
							object_Z = parser.getText();
						} else if (text == 'on_behalf_of') {
							on_behalf_of = parser.readValueAs(Object.class);
						} else if (text == 'order') {
							order = parser.readValueAs(Object.class);
						} else if (text == 'outcome') {
							outcome = new Outcome(parser);
						} else if (text == 'paid') {
							paid = parser.getBooleanValue();
						} else if (text == 'payment_intent') {
							payment_intent = parser.getText();
						} else if (text == 'payment_method') {
							payment_method = parser.getText();
						} else if (text == 'payment_method_details') {
							payment_method_details = new Payment_method_details(parser);
						} else if (text == 'receipt_email') {
							receipt_email = parser.readValueAs(Object.class);
						} else if (text == 'receipt_number') {
							receipt_number = parser.readValueAs(Object.class);
						} else if (text == 'receipt_url') {
							receipt_url = parser.getText();
						} else if (text == 'refunded') {
							refunded = parser.getBooleanValue();
						} else if (text == 'refunds') {
							refunds = new Refunds(parser);
						} else if (text == 'review') {
							review = parser.readValueAs(Object.class);
						} else if (text == 'shipping') {
							shipping = parser.readValueAs(Object.class);
						} else if (text == 'source') {
							source = parser.readValueAs(Object.class);
						} else if (text == 'source_transfer') {
							source_transfer = parser.readValueAs(Object.class);
						} else if (text == 'statement_descriptor') {
							statement_descriptor = parser.readValueAs(Object.class);
						} else if (text == 'statement_descriptor_suffix') {
							statement_descriptor_suffix = parser.readValueAs(Object.class);
						} else if (text == 'status') {
							status = parser.getText();
						} else if (text == 'transfer_data') {
							transfer_data = parser.readValueAs(Object.class);
						} else if (text == 'transfer_group') {
							transfer_group = parser.readValueAs(Object.class);
						} else {
							System.debug(LoggingLevel.WARN, 'Data consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Fraud_details {

		public Fraud_details(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'Fraud_details consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Sepa_debit {
		public String bank_code {get;set;} 
		public String branch_code {get;set;} 
		public String country {get;set;} 
		public String fingerprint {get;set;} 
		public String last4 {get;set;} 
		public String mandate {get;set;} 

		public Sepa_debit(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'bank_code') {
							bank_code = parser.getText();
						} else if (text == 'branch_code') {
							branch_code = parser.getText();
						} else if (text == 'country') {
							country = parser.getText();
						} else if (text == 'fingerprint') {
							fingerprint = parser.getText();
						} else if (text == 'last4') {
							last4 = parser.getText();
						} else if (text == 'mandate') {
							mandate = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Sepa_debit consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card {
		public Object installments {get;set;} 
		public Object network {get;set;} 
		public String request_three_d_secure {get;set;} 

		public Card(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'installments') {
							installments = parser.readValueAs(Object.class);
						} else if (text == 'network') {
							network = parser.readValueAs(Object.class);
						} else if (text == 'request_three_d_secure') {
							request_three_d_secure = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Card consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Billing_details {
		public Address address {get;set;} 
		public String email {get;set;} 
		public String name {get;set;} 
		public String phone {get;set;} 

		public Billing_details(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'address') {
							address = new Address(parser);
						} else if (text == 'email') {
							email = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'phone') {
							phone = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Billing_details consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Payment_method_options {
		public Card card {get;set;} 
		public Fraud_details sepa_debit {get;set;} 

		public Payment_method_options(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'card') {
							card = new Card(parser);
						} else if (text == 'sepa_debit') {
							sepa_debit = new Fraud_details(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Payment_method_options consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Data_Z {
		public Object_Z object_Z {get;set;} // in json: object

		public Data_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'object') {
							object_Z = new Object_Z(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Data_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Outcome {
		public String network_status {get;set;} 
		public Object reason {get;set;} 
		public String risk_level {get;set;} 
		public String seller_message {get;set;} 
		public String type {get;set;} 

		public Outcome(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'network_status') {
							network_status = parser.getText();
						} else if (text == 'reason') {
							reason = parser.readValueAs(Object.class);
						} else if (text == 'risk_level') {
							risk_level = parser.getText();
						} else if (text == 'seller_message') {
							seller_message = parser.getText();
						} else if (text == 'type') {
							type = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Outcome consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Refunds {
		public List<Fraud_details> data {get;set;} 
		public Boolean has_more {get;set;} 
		public String object_Z {get;set;} // in json: object
		public Integer total_count {get;set;} 
		public String url {get;set;} 

		public Refunds(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'data') {
							data = arrayOfFraud_details(parser);
						} else if (text == 'has_more') {
							has_more = parser.getBooleanValue();
						} else if (text == 'object') {
							object_Z = parser.getText();
						} else if (text == 'total_count') {
							total_count = parser.getIntegerValue();
						} else if (text == 'url') {
							url = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Refunds consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Charges {
		public List<Data> data {get;set;} 
		public Boolean has_more {get;set;} 
		public String object_Z {get;set;} // in json: object
		public Integer total_count {get;set;} 
		public String url {get;set;} 

		public Charges(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'data') {
							data = arrayOfData(parser);
						} else if (text == 'has_more') {
							has_more = parser.getBooleanValue();
						} else if (text == 'object') {
							object_Z = parser.getText();
						} else if (text == 'total_count') {
							total_count = parser.getIntegerValue();
						} else if (text == 'url') {
							url = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Charges consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Payment_IntentObject {
		public String id {get;set;} 
		public String api_version {get;set;} 
		public Data_Z data {get;set;} 
		public Request request {get;set;} 
		public String type {get;set;} 
		public String account {get;set;} 
		public Integer created {get;set;} 
		public Boolean livemode {get;set;} 
		public Integer pending_webhooks {get;set;} 

		public Payment_IntentObject(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'api_version') {
							api_version = parser.getText();
						} else if (text == 'data') {
							data = new Data_Z(parser);
						} else if (text == 'request') {
							request = new Request(parser);
						} else if (text == 'type') {
							type = parser.getText();
						} else if (text == 'account') {
							account = parser.getText();
						} else if (text == 'created') {
							created = parser.getIntegerValue();
						} else if (text == 'livemode') {
							livemode = parser.getBooleanValue();
						} else if (text == 'pending_webhooks') {
							pending_webhooks = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Payment_IntentObject consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static Payment_IntentObject parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new Payment_IntentObject(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	







    private static List<Data> arrayOfData(System.JSONParser p) {
        List<Data> res = new List<Data>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Data(p));
        }
        return res;
    }


    private static List<String> arrayOfString(System.JSONParser p) {
        List<String> res = new List<String>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getText());
        }
        return res;
    }











    private static List<Fraud_details> arrayOfFraud_details(System.JSONParser p) {
        List<Fraud_details> res = new List<Fraud_details>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Fraud_details(p));
        }
        return res;
    }






}